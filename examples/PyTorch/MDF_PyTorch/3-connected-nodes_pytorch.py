'''
This script has been generated by modeci_mdf v0.4.4.
It is an export of a MDF model (mdf.s - MDF stateful, i.e. full MDF allowing stateful parameters) to PyTorch

'''

import torch
import torch.nn as nn
import onnx
import onnxruntime as rt
from math import *

class A(nn.Module):
	def __init__(
		self,
		level = torch.tensor(1.0), # orig type: <class 'float'>
	):
		super().__init__()
		self.level=level
		self.execution_count=torch.tensor(0)
	def forward(self, ):
		self.execution_count=self.execution_count+torch.tensor(1)
		return self.level

class B(nn.Module):
	def __init__(
		self,
		2nd_node = torch.tensor(1/(1+(input))), # orig type: <class 'str'>
	):
		super().__init__()
		self.2nd-node=2nd-node
		self.execution_count=torch.tensor(0)
	def forward(self,input, ):
		self.execution_count=self.execution_count+torch.tensor(1)
		return self.2nd-node

class C(nn.Module):
	def __init__(
		self,
		3rd-node = torch.tensor(100*input), # orig type: <class 'str'>
	):
		super().__init__()
		self.3rd-node=3rd-node
		self.execution_count=torch.tensor(0)
	def forward(self,input, ):
		self.execution_count=self.execution_count+torch.tensor(1)
		return self.3rd-node

class Model(nn.Module):
	def __init__(self,A, B, C, ):
		super().__init__()
		self.A = A
		self.B = B
		self.C = C
	def forward(self, input):
		 val_A=torch.zeros_like(input)
		 val_B=torch.zeros_like(input)
		 val_C=torch.zeros_like(input)

		 val_A=val_A+self.A()
		 val_B=val_B+self.B(val_A)
		 val_C=val_C+self.C(val_B)

		 return val_A,val_B,val_C,

model = Model(A=A(),B=B(),C=C(),)
model=torch.jit.script(model)
dummy_input =torch.tensor(0.0)
output = model(dummy_input)
torch.onnx.export(model,dummy_input,'3-connected-nodes.onnx',verbose=True,input_names=[],opset_version=9)
onnx_model = onnx.load('3-connected-nodes.onnx')
onnx.checker.check_model(onnx_model)
sess = rt.InferenceSession('3-connected-nodes.onnx')
res = sess.run(None, {sess.get_inputs()[0].name: dummy_input.numpy()} if len(sess.get_inputs())>0 else {})

if __name__ == '__main__':
	print('Exported to PyTorch and ONNX')